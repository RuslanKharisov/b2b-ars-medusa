name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.backend.outputs.changed }}
      frontend_changed: ${{ steps.frontend.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect backend changes
        id: backend
        run: |
          if git diff --name-only HEAD^ HEAD | grep -i "^ars-backend/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect frontend changes
        id: frontend
        run: |
          if git diff --name-only HEAD^ HEAD | grep "^ars-storefront/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH access
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Rsync project to VPS
        run: |
          rsync -az \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{secrets.SERVER_USER}}@${{secrets.REMOTE_HOST}}:/home/${{secrets.SERVER_USER}}/b2b-ars-medusa

      - name: Deploy & start backend/frontend via PM2
        run: |
          ssh -o StrictHostKeyChecking=no ${{secrets.SERVER_USER}}@${{secrets.REMOTE_HOST}} << 'EOF'
          set -e

          # Загружаем NVM
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"

          # Активируем нужную версию Node.js
          nvm use 22.13.1 

          cd /home/${{ secrets.SERVER_USER }}/b2b-ars-medusa

          echo "📦 Копируем .env файлы..."
          cp /home/${{ secrets.SERVER_USER }}/secrets/env-backend ars-backend/.env
          cp /home/${{ secrets.SERVER_USER }}/secrets/env-storefront ars-storefront/.env

          if [[ "${{ needs.detect-changes.outputs.backend_changed }}" == "true" ]]; then
            echo "🔧 Backend изменён. Билдим и запускаем Medusa..."

            cd ars-backend/
            npm install
            npm run build

            # Копируем .env и package.json  в .medusa/server
            cp .env .medusa/server/.env
            # cp package.json ../.medusa/server/package.json

            cd .medusa/server
            npm install

            echo "🚀 Перезапускаем Medusa admin и worker через PM2"

            pm2 restart medusa-admin --update-env
            pm2 restart medusa-worker --update-env

            # ToDo: реализовать проверку, если сервиса нет, создать!!!
            # pm2 start npm --name medusa-admin -- run start:admin
            # pm2 start npm --name medusa-worker -- run start:worker
          else
            echo "✅ Backend не изменился — пропускаем пересборку"
          fi

          if [[ "${{ needs.detect-changes.outputs.frontend_changed }}" == "true" ]]; then
            echo "🌐 Frontend изменён. Перезапускаем Storefront..."

            cd /home/${{ secrets.SERVER_USER }}/b2b-ars-medusa/ars-storefront
            yarn install
            yarn build

            if pm2 list | grep -q storefront; then
              echo "♻️ PM2: storefront уже запущен — перезапуск..."
              pm2 restart storefront --update-env
            else
              echo "🚀 PM2: storefront не найден — первый запуск..."
              pm2 start yarn --name storefront -- start
            fi
          else
            echo "✅ Frontend не изменился — пропускаем перезапуск"
          fi

          echo "✅ Деплой завершён"
          EOF
